/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.SSL_FieldCicularArc', null, global);
goog.exportSymbol('proto.SSL_FieldLineSegment', null, global);
goog.exportSymbol('proto.SSL_GeometryCameraCalibration', null, global);
goog.exportSymbol('proto.SSL_GeometryData', null, global);
goog.exportSymbol('proto.SSL_GeometryFieldSize', null, global);
goog.exportSymbol('proto.Vector2f', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.Vector2f = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.Vector2f, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.Vector2f.displayName = 'proto.Vector2f';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.Vector2f.prototype.toObject = function(opt_includeInstance) {
  return proto.Vector2f.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.Vector2f} msg The msg instance to transform.
 * @return {!Object}
 */
proto.Vector2f.toObject = function(includeInstance, msg) {
  var f, obj = {
    x: +jspb.Message.getField(msg, 1),
    y: +jspb.Message.getField(msg, 2)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.Vector2f}
 */
proto.Vector2f.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.Vector2f;
  return proto.Vector2f.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.Vector2f} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.Vector2f}
 */
proto.Vector2f.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.Vector2f} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.Vector2f.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.Vector2f.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.Vector2f.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.Vector2f} The clone.
 */
proto.Vector2f.prototype.cloneMessage = function() {
  return /** @type {!proto.Vector2f} */ (jspb.Message.cloneMessage(this));
};


/**
 * required float x = 1;
 * @return {number}
 */
proto.Vector2f.prototype.getX = function() {
  return /** @type {number} */ (!this.hasX() ? 0.0 : +jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.Vector2f.prototype.setX = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.Vector2f.prototype.clearX = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Vector2f.prototype.hasX = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required float y = 2;
 * @return {number}
 */
proto.Vector2f.prototype.getY = function() {
  return /** @type {number} */ (!this.hasY() ? 0.0 : +jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.Vector2f.prototype.setY = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.Vector2f.prototype.clearY = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.Vector2f.prototype.hasY = function() {
  return jspb.Message.getField(this, 2) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SSL_FieldLineSegment = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SSL_FieldLineSegment, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SSL_FieldLineSegment.displayName = 'proto.SSL_FieldLineSegment';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SSL_FieldLineSegment.prototype.toObject = function(opt_includeInstance) {
  return proto.SSL_FieldLineSegment.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SSL_FieldLineSegment} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SSL_FieldLineSegment.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getField(msg, 1),
    p1: (f = msg.getP1()) && proto.Vector2f.toObject(includeInstance, f),
    p2: (f = msg.getP2()) && proto.Vector2f.toObject(includeInstance, f),
    thickness: +jspb.Message.getField(msg, 4)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SSL_FieldLineSegment}
 */
proto.SSL_FieldLineSegment.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SSL_FieldLineSegment;
  return proto.SSL_FieldLineSegment.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SSL_FieldLineSegment} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SSL_FieldLineSegment}
 */
proto.SSL_FieldLineSegment.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.Vector2f;
      reader.readMessage(value,proto.Vector2f.deserializeBinaryFromReader);
      msg.setP1(value);
      break;
    case 3:
      var value = new proto.Vector2f;
      reader.readMessage(value,proto.Vector2f.deserializeBinaryFromReader);
      msg.setP2(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setThickness(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.SSL_FieldLineSegment} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SSL_FieldLineSegment.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SSL_FieldLineSegment.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.SSL_FieldLineSegment.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getP1();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Vector2f.serializeBinaryToWriter
    );
  }
  f = this.getP2();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      proto.Vector2f.serializeBinaryToWriter
    );
  }
  f = jspb.Message.getField(this, 4);
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.SSL_FieldLineSegment} The clone.
 */
proto.SSL_FieldLineSegment.prototype.cloneMessage = function() {
  return /** @type {!proto.SSL_FieldLineSegment} */ (jspb.Message.cloneMessage(this));
};


/**
 * required string name = 1;
 * @return {string}
 */
proto.SSL_FieldLineSegment.prototype.getName = function() {
  return /** @type {string} */ (!this.hasName() ? "" : jspb.Message.getField(this, 1));
};


/** @param {string|undefined} value  */
proto.SSL_FieldLineSegment.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SSL_FieldLineSegment.prototype.clearName = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_FieldLineSegment.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required Vector2f p1 = 2;
 * @return {!proto.Vector2f}
 */
proto.SSL_FieldLineSegment.prototype.getP1 = function() {
  return /** @type{!proto.Vector2f} */ (
    jspb.Message.getWrapperField(this, proto.Vector2f, 2, 1));
};


/** @param {proto.Vector2f|undefined} value  */
proto.SSL_FieldLineSegment.prototype.setP1 = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.SSL_FieldLineSegment.prototype.clearP1 = function() {
  this.setP1(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_FieldLineSegment.prototype.hasP1 = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required Vector2f p2 = 3;
 * @return {!proto.Vector2f}
 */
proto.SSL_FieldLineSegment.prototype.getP2 = function() {
  return /** @type{!proto.Vector2f} */ (
    jspb.Message.getWrapperField(this, proto.Vector2f, 3, 1));
};


/** @param {proto.Vector2f|undefined} value  */
proto.SSL_FieldLineSegment.prototype.setP2 = function(value) {
  jspb.Message.setWrapperField(this, 3, value);
};


proto.SSL_FieldLineSegment.prototype.clearP2 = function() {
  this.setP2(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_FieldLineSegment.prototype.hasP2 = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required float thickness = 4;
 * @return {number}
 */
proto.SSL_FieldLineSegment.prototype.getThickness = function() {
  return /** @type {number} */ (!this.hasThickness() ? 0.0 : +jspb.Message.getField(this, 4));
};


/** @param {number|undefined} value  */
proto.SSL_FieldLineSegment.prototype.setThickness = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SSL_FieldLineSegment.prototype.clearThickness = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_FieldLineSegment.prototype.hasThickness = function() {
  return jspb.Message.getField(this, 4) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SSL_FieldCicularArc = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SSL_FieldCicularArc, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SSL_FieldCicularArc.displayName = 'proto.SSL_FieldCicularArc';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SSL_FieldCicularArc.prototype.toObject = function(opt_includeInstance) {
  return proto.SSL_FieldCicularArc.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SSL_FieldCicularArc} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SSL_FieldCicularArc.toObject = function(includeInstance, msg) {
  var f, obj = {
    name: jspb.Message.getField(msg, 1),
    center: (f = msg.getCenter()) && proto.Vector2f.toObject(includeInstance, f),
    radius: +jspb.Message.getField(msg, 3),
    a1: +jspb.Message.getField(msg, 4),
    a2: +jspb.Message.getField(msg, 5),
    thickness: +jspb.Message.getField(msg, 6)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SSL_FieldCicularArc}
 */
proto.SSL_FieldCicularArc.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SSL_FieldCicularArc;
  return proto.SSL_FieldCicularArc.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SSL_FieldCicularArc} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SSL_FieldCicularArc}
 */
proto.SSL_FieldCicularArc.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {string} */ (reader.readString());
      msg.setName(value);
      break;
    case 2:
      var value = new proto.Vector2f;
      reader.readMessage(value,proto.Vector2f.deserializeBinaryFromReader);
      msg.setCenter(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setRadius(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setA1(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setA2(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setThickness(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.SSL_FieldCicularArc} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SSL_FieldCicularArc.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SSL_FieldCicularArc.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.SSL_FieldCicularArc.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeString(
      1,
      f
    );
  }
  f = this.getCenter();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      proto.Vector2f.serializeBinaryToWriter
    );
  }
  f = jspb.Message.getField(this, 3);
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = jspb.Message.getField(this, 4);
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = jspb.Message.getField(this, 5);
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = jspb.Message.getField(this, 6);
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.SSL_FieldCicularArc} The clone.
 */
proto.SSL_FieldCicularArc.prototype.cloneMessage = function() {
  return /** @type {!proto.SSL_FieldCicularArc} */ (jspb.Message.cloneMessage(this));
};


/**
 * required string name = 1;
 * @return {string}
 */
proto.SSL_FieldCicularArc.prototype.getName = function() {
  return /** @type {string} */ (!this.hasName() ? "" : jspb.Message.getField(this, 1));
};


/** @param {string|undefined} value  */
proto.SSL_FieldCicularArc.prototype.setName = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SSL_FieldCicularArc.prototype.clearName = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_FieldCicularArc.prototype.hasName = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required Vector2f center = 2;
 * @return {!proto.Vector2f}
 */
proto.SSL_FieldCicularArc.prototype.getCenter = function() {
  return /** @type{!proto.Vector2f} */ (
    jspb.Message.getWrapperField(this, proto.Vector2f, 2, 1));
};


/** @param {proto.Vector2f|undefined} value  */
proto.SSL_FieldCicularArc.prototype.setCenter = function(value) {
  jspb.Message.setWrapperField(this, 2, value);
};


proto.SSL_FieldCicularArc.prototype.clearCenter = function() {
  this.setCenter(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_FieldCicularArc.prototype.hasCenter = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required float radius = 3;
 * @return {number}
 */
proto.SSL_FieldCicularArc.prototype.getRadius = function() {
  return /** @type {number} */ (!this.hasRadius() ? 0.0 : +jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.SSL_FieldCicularArc.prototype.setRadius = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SSL_FieldCicularArc.prototype.clearRadius = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_FieldCicularArc.prototype.hasRadius = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required float a1 = 4;
 * @return {number}
 */
proto.SSL_FieldCicularArc.prototype.getA1 = function() {
  return /** @type {number} */ (!this.hasA1() ? 0.0 : +jspb.Message.getField(this, 4));
};


/** @param {number|undefined} value  */
proto.SSL_FieldCicularArc.prototype.setA1 = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SSL_FieldCicularArc.prototype.clearA1 = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_FieldCicularArc.prototype.hasA1 = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required float a2 = 5;
 * @return {number}
 */
proto.SSL_FieldCicularArc.prototype.getA2 = function() {
  return /** @type {number} */ (!this.hasA2() ? 0.0 : +jspb.Message.getField(this, 5));
};


/** @param {number|undefined} value  */
proto.SSL_FieldCicularArc.prototype.setA2 = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.SSL_FieldCicularArc.prototype.clearA2 = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_FieldCicularArc.prototype.hasA2 = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required float thickness = 6;
 * @return {number}
 */
proto.SSL_FieldCicularArc.prototype.getThickness = function() {
  return /** @type {number} */ (!this.hasThickness() ? 0.0 : +jspb.Message.getField(this, 6));
};


/** @param {number|undefined} value  */
proto.SSL_FieldCicularArc.prototype.setThickness = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.SSL_FieldCicularArc.prototype.clearThickness = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_FieldCicularArc.prototype.hasThickness = function() {
  return jspb.Message.getField(this, 6) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SSL_GeometryFieldSize = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SSL_GeometryFieldSize.repeatedFields_, null);
};
goog.inherits(proto.SSL_GeometryFieldSize, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SSL_GeometryFieldSize.displayName = 'proto.SSL_GeometryFieldSize';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SSL_GeometryFieldSize.repeatedFields_ = [6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SSL_GeometryFieldSize.prototype.toObject = function(opt_includeInstance) {
  return proto.SSL_GeometryFieldSize.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SSL_GeometryFieldSize} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SSL_GeometryFieldSize.toObject = function(includeInstance, msg) {
  var f, obj = {
    fieldLength: jspb.Message.getField(msg, 1),
    fieldWidth: jspb.Message.getField(msg, 2),
    goalWidth: jspb.Message.getField(msg, 3),
    goalDepth: jspb.Message.getField(msg, 4),
    boundaryWidth: jspb.Message.getField(msg, 5),
    fieldLinesList: jspb.Message.toObjectList(msg.getFieldLinesList(),
    proto.SSL_FieldLineSegment.toObject, includeInstance),
    fieldArcsList: jspb.Message.toObjectList(msg.getFieldArcsList(),
    proto.SSL_FieldCicularArc.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SSL_GeometryFieldSize}
 */
proto.SSL_GeometryFieldSize.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SSL_GeometryFieldSize;
  return proto.SSL_GeometryFieldSize.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SSL_GeometryFieldSize} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SSL_GeometryFieldSize}
 */
proto.SSL_GeometryFieldSize.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFieldLength(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setFieldWidth(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGoalWidth(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setGoalDepth(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readInt32());
      msg.setBoundaryWidth(value);
      break;
    case 6:
      var value = new proto.SSL_FieldLineSegment;
      reader.readMessage(value,proto.SSL_FieldLineSegment.deserializeBinaryFromReader);
      msg.getFieldLinesList().push(value);
      msg.setFieldLinesList(msg.getFieldLinesList());
      break;
    case 7:
      var value = new proto.SSL_FieldCicularArc;
      reader.readMessage(value,proto.SSL_FieldCicularArc.deserializeBinaryFromReader);
      msg.getFieldArcsList().push(value);
      msg.setFieldArcsList(msg.getFieldArcsList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.SSL_GeometryFieldSize} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SSL_GeometryFieldSize.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SSL_GeometryFieldSize.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.SSL_GeometryFieldSize.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeInt32(
      1,
      f
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeInt32(
      2,
      f
    );
  }
  f = jspb.Message.getField(this, 3);
  if (f != null) {
    writer.writeInt32(
      3,
      f
    );
  }
  f = jspb.Message.getField(this, 4);
  if (f != null) {
    writer.writeInt32(
      4,
      f
    );
  }
  f = jspb.Message.getField(this, 5);
  if (f != null) {
    writer.writeInt32(
      5,
      f
    );
  }
  f = this.getFieldLinesList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.SSL_FieldLineSegment.serializeBinaryToWriter
    );
  }
  f = this.getFieldArcsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.SSL_FieldCicularArc.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.SSL_GeometryFieldSize} The clone.
 */
proto.SSL_GeometryFieldSize.prototype.cloneMessage = function() {
  return /** @type {!proto.SSL_GeometryFieldSize} */ (jspb.Message.cloneMessage(this));
};


/**
 * required int32 field_length = 1;
 * @return {number}
 */
proto.SSL_GeometryFieldSize.prototype.getFieldLength = function() {
  return /** @type {number} */ (!this.hasFieldLength() ? 0 : jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.SSL_GeometryFieldSize.prototype.setFieldLength = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SSL_GeometryFieldSize.prototype.clearFieldLength = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_GeometryFieldSize.prototype.hasFieldLength = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required int32 field_width = 2;
 * @return {number}
 */
proto.SSL_GeometryFieldSize.prototype.getFieldWidth = function() {
  return /** @type {number} */ (!this.hasFieldWidth() ? 0 : jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.SSL_GeometryFieldSize.prototype.setFieldWidth = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SSL_GeometryFieldSize.prototype.clearFieldWidth = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_GeometryFieldSize.prototype.hasFieldWidth = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required int32 goal_width = 3;
 * @return {number}
 */
proto.SSL_GeometryFieldSize.prototype.getGoalWidth = function() {
  return /** @type {number} */ (!this.hasGoalWidth() ? 0 : jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.SSL_GeometryFieldSize.prototype.setGoalWidth = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SSL_GeometryFieldSize.prototype.clearGoalWidth = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_GeometryFieldSize.prototype.hasGoalWidth = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required int32 goal_depth = 4;
 * @return {number}
 */
proto.SSL_GeometryFieldSize.prototype.getGoalDepth = function() {
  return /** @type {number} */ (!this.hasGoalDepth() ? 0 : jspb.Message.getField(this, 4));
};


/** @param {number|undefined} value  */
proto.SSL_GeometryFieldSize.prototype.setGoalDepth = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SSL_GeometryFieldSize.prototype.clearGoalDepth = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_GeometryFieldSize.prototype.hasGoalDepth = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required int32 boundary_width = 5;
 * @return {number}
 */
proto.SSL_GeometryFieldSize.prototype.getBoundaryWidth = function() {
  return /** @type {number} */ (!this.hasBoundaryWidth() ? 0 : jspb.Message.getField(this, 5));
};


/** @param {number|undefined} value  */
proto.SSL_GeometryFieldSize.prototype.setBoundaryWidth = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.SSL_GeometryFieldSize.prototype.clearBoundaryWidth = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_GeometryFieldSize.prototype.hasBoundaryWidth = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * repeated SSL_FieldLineSegment field_lines = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.SSL_FieldLineSegment>}
 */
proto.SSL_GeometryFieldSize.prototype.getFieldLinesList = function() {
  return /** @type{!Array.<!proto.SSL_FieldLineSegment>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SSL_FieldLineSegment, 6));
};


/** @param {Array.<!proto.SSL_FieldLineSegment>} value  */
proto.SSL_GeometryFieldSize.prototype.setFieldLinesList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


proto.SSL_GeometryFieldSize.prototype.clearFieldLinesList = function() {
  this.setFieldLinesList([]);
};


/**
 * repeated SSL_FieldCicularArc field_arcs = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.SSL_FieldCicularArc>}
 */
proto.SSL_GeometryFieldSize.prototype.getFieldArcsList = function() {
  return /** @type{!Array.<!proto.SSL_FieldCicularArc>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SSL_FieldCicularArc, 7));
};


/** @param {Array.<!proto.SSL_FieldCicularArc>} value  */
proto.SSL_GeometryFieldSize.prototype.setFieldArcsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


proto.SSL_GeometryFieldSize.prototype.clearFieldArcsList = function() {
  this.setFieldArcsList([]);
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SSL_GeometryCameraCalibration = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SSL_GeometryCameraCalibration, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SSL_GeometryCameraCalibration.displayName = 'proto.SSL_GeometryCameraCalibration';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SSL_GeometryCameraCalibration.prototype.toObject = function(opt_includeInstance) {
  return proto.SSL_GeometryCameraCalibration.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SSL_GeometryCameraCalibration} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SSL_GeometryCameraCalibration.toObject = function(includeInstance, msg) {
  var f, obj = {
    cameraId: jspb.Message.getField(msg, 1),
    focalLength: +jspb.Message.getField(msg, 2),
    principalPointX: +jspb.Message.getField(msg, 3),
    principalPointY: +jspb.Message.getField(msg, 4),
    distortion: +jspb.Message.getField(msg, 5),
    q0: +jspb.Message.getField(msg, 6),
    q1: +jspb.Message.getField(msg, 7),
    q2: +jspb.Message.getField(msg, 8),
    q3: +jspb.Message.getField(msg, 9),
    tx: +jspb.Message.getField(msg, 10),
    ty: +jspb.Message.getField(msg, 11),
    tz: +jspb.Message.getField(msg, 12),
    derivedCameraWorldTx: jspb.Message.getOptionalFloatingPointField(msg, 13),
    derivedCameraWorldTy: jspb.Message.getOptionalFloatingPointField(msg, 14),
    derivedCameraWorldTz: jspb.Message.getOptionalFloatingPointField(msg, 15)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SSL_GeometryCameraCalibration}
 */
proto.SSL_GeometryCameraCalibration.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SSL_GeometryCameraCalibration;
  return proto.SSL_GeometryCameraCalibration.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SSL_GeometryCameraCalibration} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SSL_GeometryCameraCalibration}
 */
proto.SSL_GeometryCameraCalibration.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCameraId(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setFocalLength(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPrincipalPointX(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPrincipalPointY(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDistortion(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setQ0(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setQ1(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setQ2(value);
      break;
    case 9:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setQ3(value);
      break;
    case 10:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTx(value);
      break;
    case 11:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTy(value);
      break;
    case 12:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setTz(value);
      break;
    case 13:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDerivedCameraWorldTx(value);
      break;
    case 14:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDerivedCameraWorldTy(value);
      break;
    case 15:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setDerivedCameraWorldTz(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.SSL_GeometryCameraCalibration} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SSL_GeometryCameraCalibration.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SSL_GeometryCameraCalibration.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.SSL_GeometryCameraCalibration.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeFloat(
      2,
      f
    );
  }
  f = jspb.Message.getField(this, 3);
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = jspb.Message.getField(this, 4);
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = jspb.Message.getField(this, 5);
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = jspb.Message.getField(this, 6);
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = jspb.Message.getField(this, 7);
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = jspb.Message.getField(this, 8);
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
  f = jspb.Message.getField(this, 9);
  if (f != null) {
    writer.writeFloat(
      9,
      f
    );
  }
  f = jspb.Message.getField(this, 10);
  if (f != null) {
    writer.writeFloat(
      10,
      f
    );
  }
  f = jspb.Message.getField(this, 11);
  if (f != null) {
    writer.writeFloat(
      11,
      f
    );
  }
  f = jspb.Message.getField(this, 12);
  if (f != null) {
    writer.writeFloat(
      12,
      f
    );
  }
  f = jspb.Message.getField(this, 13);
  if (f != null) {
    writer.writeFloat(
      13,
      f
    );
  }
  f = jspb.Message.getField(this, 14);
  if (f != null) {
    writer.writeFloat(
      14,
      f
    );
  }
  f = jspb.Message.getField(this, 15);
  if (f != null) {
    writer.writeFloat(
      15,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.SSL_GeometryCameraCalibration} The clone.
 */
proto.SSL_GeometryCameraCalibration.prototype.cloneMessage = function() {
  return /** @type {!proto.SSL_GeometryCameraCalibration} */ (jspb.Message.cloneMessage(this));
};


/**
 * required uint32 camera_id = 1;
 * @return {number}
 */
proto.SSL_GeometryCameraCalibration.prototype.getCameraId = function() {
  return /** @type {number} */ (!this.hasCameraId() ? 0 : jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.SSL_GeometryCameraCalibration.prototype.setCameraId = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SSL_GeometryCameraCalibration.prototype.clearCameraId = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_GeometryCameraCalibration.prototype.hasCameraId = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required float focal_length = 2;
 * @return {number}
 */
proto.SSL_GeometryCameraCalibration.prototype.getFocalLength = function() {
  return /** @type {number} */ (!this.hasFocalLength() ? 0.0 : +jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.SSL_GeometryCameraCalibration.prototype.setFocalLength = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SSL_GeometryCameraCalibration.prototype.clearFocalLength = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_GeometryCameraCalibration.prototype.hasFocalLength = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required float principal_point_x = 3;
 * @return {number}
 */
proto.SSL_GeometryCameraCalibration.prototype.getPrincipalPointX = function() {
  return /** @type {number} */ (!this.hasPrincipalPointX() ? 0.0 : +jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.SSL_GeometryCameraCalibration.prototype.setPrincipalPointX = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SSL_GeometryCameraCalibration.prototype.clearPrincipalPointX = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_GeometryCameraCalibration.prototype.hasPrincipalPointX = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required float principal_point_y = 4;
 * @return {number}
 */
proto.SSL_GeometryCameraCalibration.prototype.getPrincipalPointY = function() {
  return /** @type {number} */ (!this.hasPrincipalPointY() ? 0.0 : +jspb.Message.getField(this, 4));
};


/** @param {number|undefined} value  */
proto.SSL_GeometryCameraCalibration.prototype.setPrincipalPointY = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SSL_GeometryCameraCalibration.prototype.clearPrincipalPointY = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_GeometryCameraCalibration.prototype.hasPrincipalPointY = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * required float distortion = 5;
 * @return {number}
 */
proto.SSL_GeometryCameraCalibration.prototype.getDistortion = function() {
  return /** @type {number} */ (!this.hasDistortion() ? 0.0 : +jspb.Message.getField(this, 5));
};


/** @param {number|undefined} value  */
proto.SSL_GeometryCameraCalibration.prototype.setDistortion = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.SSL_GeometryCameraCalibration.prototype.clearDistortion = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_GeometryCameraCalibration.prototype.hasDistortion = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required float q0 = 6;
 * @return {number}
 */
proto.SSL_GeometryCameraCalibration.prototype.getQ0 = function() {
  return /** @type {number} */ (!this.hasQ0() ? 0.0 : +jspb.Message.getField(this, 6));
};


/** @param {number|undefined} value  */
proto.SSL_GeometryCameraCalibration.prototype.setQ0 = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.SSL_GeometryCameraCalibration.prototype.clearQ0 = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_GeometryCameraCalibration.prototype.hasQ0 = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required float q1 = 7;
 * @return {number}
 */
proto.SSL_GeometryCameraCalibration.prototype.getQ1 = function() {
  return /** @type {number} */ (!this.hasQ1() ? 0.0 : +jspb.Message.getField(this, 7));
};


/** @param {number|undefined} value  */
proto.SSL_GeometryCameraCalibration.prototype.setQ1 = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.SSL_GeometryCameraCalibration.prototype.clearQ1 = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_GeometryCameraCalibration.prototype.hasQ1 = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * required float q2 = 8;
 * @return {number}
 */
proto.SSL_GeometryCameraCalibration.prototype.getQ2 = function() {
  return /** @type {number} */ (!this.hasQ2() ? 0.0 : +jspb.Message.getField(this, 8));
};


/** @param {number|undefined} value  */
proto.SSL_GeometryCameraCalibration.prototype.setQ2 = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.SSL_GeometryCameraCalibration.prototype.clearQ2 = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_GeometryCameraCalibration.prototype.hasQ2 = function() {
  return jspb.Message.getField(this, 8) != null;
};


/**
 * required float q3 = 9;
 * @return {number}
 */
proto.SSL_GeometryCameraCalibration.prototype.getQ3 = function() {
  return /** @type {number} */ (!this.hasQ3() ? 0.0 : +jspb.Message.getField(this, 9));
};


/** @param {number|undefined} value  */
proto.SSL_GeometryCameraCalibration.prototype.setQ3 = function(value) {
  jspb.Message.setField(this, 9, value);
};


proto.SSL_GeometryCameraCalibration.prototype.clearQ3 = function() {
  jspb.Message.setField(this, 9, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_GeometryCameraCalibration.prototype.hasQ3 = function() {
  return jspb.Message.getField(this, 9) != null;
};


/**
 * required float tx = 10;
 * @return {number}
 */
proto.SSL_GeometryCameraCalibration.prototype.getTx = function() {
  return /** @type {number} */ (!this.hasTx() ? 0.0 : +jspb.Message.getField(this, 10));
};


/** @param {number|undefined} value  */
proto.SSL_GeometryCameraCalibration.prototype.setTx = function(value) {
  jspb.Message.setField(this, 10, value);
};


proto.SSL_GeometryCameraCalibration.prototype.clearTx = function() {
  jspb.Message.setField(this, 10, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_GeometryCameraCalibration.prototype.hasTx = function() {
  return jspb.Message.getField(this, 10) != null;
};


/**
 * required float ty = 11;
 * @return {number}
 */
proto.SSL_GeometryCameraCalibration.prototype.getTy = function() {
  return /** @type {number} */ (!this.hasTy() ? 0.0 : +jspb.Message.getField(this, 11));
};


/** @param {number|undefined} value  */
proto.SSL_GeometryCameraCalibration.prototype.setTy = function(value) {
  jspb.Message.setField(this, 11, value);
};


proto.SSL_GeometryCameraCalibration.prototype.clearTy = function() {
  jspb.Message.setField(this, 11, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_GeometryCameraCalibration.prototype.hasTy = function() {
  return jspb.Message.getField(this, 11) != null;
};


/**
 * required float tz = 12;
 * @return {number}
 */
proto.SSL_GeometryCameraCalibration.prototype.getTz = function() {
  return /** @type {number} */ (!this.hasTz() ? 0.0 : +jspb.Message.getField(this, 12));
};


/** @param {number|undefined} value  */
proto.SSL_GeometryCameraCalibration.prototype.setTz = function(value) {
  jspb.Message.setField(this, 12, value);
};


proto.SSL_GeometryCameraCalibration.prototype.clearTz = function() {
  jspb.Message.setField(this, 12, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_GeometryCameraCalibration.prototype.hasTz = function() {
  return jspb.Message.getField(this, 12) != null;
};


/**
 * optional float derived_camera_world_tx = 13;
 * @return {number}
 */
proto.SSL_GeometryCameraCalibration.prototype.getDerivedCameraWorldTx = function() {
  return /** @type {number} */ (!this.hasDerivedCameraWorldTx() ? 0.0 : +jspb.Message.getField(this, 13));
};


/** @param {number?|undefined} value  */
proto.SSL_GeometryCameraCalibration.prototype.setDerivedCameraWorldTx = function(value) {
  jspb.Message.setField(this, 13, value);
};


proto.SSL_GeometryCameraCalibration.prototype.clearDerivedCameraWorldTx = function() {
  jspb.Message.setField(this, 13, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_GeometryCameraCalibration.prototype.hasDerivedCameraWorldTx = function() {
  return jspb.Message.getField(this, 13) != null;
};


/**
 * optional float derived_camera_world_ty = 14;
 * @return {number}
 */
proto.SSL_GeometryCameraCalibration.prototype.getDerivedCameraWorldTy = function() {
  return /** @type {number} */ (!this.hasDerivedCameraWorldTy() ? 0.0 : +jspb.Message.getField(this, 14));
};


/** @param {number?|undefined} value  */
proto.SSL_GeometryCameraCalibration.prototype.setDerivedCameraWorldTy = function(value) {
  jspb.Message.setField(this, 14, value);
};


proto.SSL_GeometryCameraCalibration.prototype.clearDerivedCameraWorldTy = function() {
  jspb.Message.setField(this, 14, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_GeometryCameraCalibration.prototype.hasDerivedCameraWorldTy = function() {
  return jspb.Message.getField(this, 14) != null;
};


/**
 * optional float derived_camera_world_tz = 15;
 * @return {number}
 */
proto.SSL_GeometryCameraCalibration.prototype.getDerivedCameraWorldTz = function() {
  return /** @type {number} */ (!this.hasDerivedCameraWorldTz() ? 0.0 : +jspb.Message.getField(this, 15));
};


/** @param {number?|undefined} value  */
proto.SSL_GeometryCameraCalibration.prototype.setDerivedCameraWorldTz = function(value) {
  jspb.Message.setField(this, 15, value);
};


proto.SSL_GeometryCameraCalibration.prototype.clearDerivedCameraWorldTz = function() {
  jspb.Message.setField(this, 15, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_GeometryCameraCalibration.prototype.hasDerivedCameraWorldTz = function() {
  return jspb.Message.getField(this, 15) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SSL_GeometryData = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SSL_GeometryData.repeatedFields_, null);
};
goog.inherits(proto.SSL_GeometryData, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SSL_GeometryData.displayName = 'proto.SSL_GeometryData';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SSL_GeometryData.repeatedFields_ = [2];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SSL_GeometryData.prototype.toObject = function(opt_includeInstance) {
  return proto.SSL_GeometryData.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SSL_GeometryData} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SSL_GeometryData.toObject = function(includeInstance, msg) {
  var f, obj = {
    field: (f = msg.getField()) && proto.SSL_GeometryFieldSize.toObject(includeInstance, f),
    calibList: jspb.Message.toObjectList(msg.getCalibList(),
    proto.SSL_GeometryCameraCalibration.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SSL_GeometryData}
 */
proto.SSL_GeometryData.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SSL_GeometryData;
  return proto.SSL_GeometryData.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SSL_GeometryData} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SSL_GeometryData}
 */
proto.SSL_GeometryData.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new proto.SSL_GeometryFieldSize;
      reader.readMessage(value,proto.SSL_GeometryFieldSize.deserializeBinaryFromReader);
      msg.setField(value);
      break;
    case 2:
      var value = new proto.SSL_GeometryCameraCalibration;
      reader.readMessage(value,proto.SSL_GeometryCameraCalibration.deserializeBinaryFromReader);
      msg.getCalibList().push(value);
      msg.setCalibList(msg.getCalibList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.SSL_GeometryData} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SSL_GeometryData.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SSL_GeometryData.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.SSL_GeometryData.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = this.getField();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      proto.SSL_GeometryFieldSize.serializeBinaryToWriter
    );
  }
  f = this.getCalibList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      2,
      f,
      proto.SSL_GeometryCameraCalibration.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.SSL_GeometryData} The clone.
 */
proto.SSL_GeometryData.prototype.cloneMessage = function() {
  return /** @type {!proto.SSL_GeometryData} */ (jspb.Message.cloneMessage(this));
};


/**
 * required SSL_GeometryFieldSize field = 1;
 * @return {!proto.SSL_GeometryFieldSize}
 */
proto.SSL_GeometryData.prototype.getField = function() {
  return /** @type{!proto.SSL_GeometryFieldSize} */ (
    jspb.Message.getWrapperField(this, proto.SSL_GeometryFieldSize, 1, 1));
};


/** @param {proto.SSL_GeometryFieldSize|undefined} value  */
proto.SSL_GeometryData.prototype.setField = function(value) {
  jspb.Message.setWrapperField(this, 1, value);
};


proto.SSL_GeometryData.prototype.clearField = function() {
  this.setField(undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_GeometryData.prototype.hasField = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * repeated SSL_GeometryCameraCalibration calib = 2;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.SSL_GeometryCameraCalibration>}
 */
proto.SSL_GeometryData.prototype.getCalibList = function() {
  return /** @type{!Array.<!proto.SSL_GeometryCameraCalibration>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SSL_GeometryCameraCalibration, 2));
};


/** @param {Array.<!proto.SSL_GeometryCameraCalibration>} value  */
proto.SSL_GeometryData.prototype.setCalibList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 2, value);
};


proto.SSL_GeometryData.prototype.clearCalibList = function() {
  this.setCalibList([]);
};


goog.object.extend(exports, proto);
