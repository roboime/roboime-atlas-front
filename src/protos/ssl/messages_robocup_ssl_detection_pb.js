/**
 * @fileoverview
 * @enhanceable
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!
/* eslint-disable */

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

goog.exportSymbol('proto.SSL_DetectionBall', null, global);
goog.exportSymbol('proto.SSL_DetectionFrame', null, global);
goog.exportSymbol('proto.SSL_DetectionRobot', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SSL_DetectionBall = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SSL_DetectionBall, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SSL_DetectionBall.displayName = 'proto.SSL_DetectionBall';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SSL_DetectionBall.prototype.toObject = function(opt_includeInstance) {
  return proto.SSL_DetectionBall.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SSL_DetectionBall} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SSL_DetectionBall.toObject = function(includeInstance, msg) {
  var f, obj = {
    confidence: +jspb.Message.getField(msg, 1),
    area: jspb.Message.getField(msg, 2),
    x: +jspb.Message.getField(msg, 3),
    y: +jspb.Message.getField(msg, 4),
    z: jspb.Message.getOptionalFloatingPointField(msg, 5),
    pixelX: +jspb.Message.getField(msg, 6),
    pixelY: +jspb.Message.getField(msg, 7)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SSL_DetectionBall}
 */
proto.SSL_DetectionBall.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SSL_DetectionBall;
  return proto.SSL_DetectionBall.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SSL_DetectionBall} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SSL_DetectionBall}
 */
proto.SSL_DetectionBall.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidence(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setArea(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setZ(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPixelX(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPixelY(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.SSL_DetectionBall} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SSL_DetectionBall.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SSL_DetectionBall.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.SSL_DetectionBall.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = jspb.Message.getField(this, 3);
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = jspb.Message.getField(this, 4);
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = jspb.Message.getField(this, 5);
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = jspb.Message.getField(this, 6);
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = jspb.Message.getField(this, 7);
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.SSL_DetectionBall} The clone.
 */
proto.SSL_DetectionBall.prototype.cloneMessage = function() {
  return /** @type {!proto.SSL_DetectionBall} */ (jspb.Message.cloneMessage(this));
};


/**
 * required float confidence = 1;
 * @return {number}
 */
proto.SSL_DetectionBall.prototype.getConfidence = function() {
  return /** @type {number} */ (!this.hasConfidence() ? 0.0 : +jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.SSL_DetectionBall.prototype.setConfidence = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SSL_DetectionBall.prototype.clearConfidence = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_DetectionBall.prototype.hasConfidence = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 area = 2;
 * @return {number}
 */
proto.SSL_DetectionBall.prototype.getArea = function() {
  return /** @type {number} */ (!this.hasArea() ? 0 : jspb.Message.getField(this, 2));
};


/** @param {number?|undefined} value  */
proto.SSL_DetectionBall.prototype.setArea = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SSL_DetectionBall.prototype.clearArea = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_DetectionBall.prototype.hasArea = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required float x = 3;
 * @return {number}
 */
proto.SSL_DetectionBall.prototype.getX = function() {
  return /** @type {number} */ (!this.hasX() ? 0.0 : +jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.SSL_DetectionBall.prototype.setX = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SSL_DetectionBall.prototype.clearX = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_DetectionBall.prototype.hasX = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required float y = 4;
 * @return {number}
 */
proto.SSL_DetectionBall.prototype.getY = function() {
  return /** @type {number} */ (!this.hasY() ? 0.0 : +jspb.Message.getField(this, 4));
};


/** @param {number|undefined} value  */
proto.SSL_DetectionBall.prototype.setY = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SSL_DetectionBall.prototype.clearY = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_DetectionBall.prototype.hasY = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float z = 5;
 * @return {number}
 */
proto.SSL_DetectionBall.prototype.getZ = function() {
  return /** @type {number} */ (!this.hasZ() ? 0.0 : +jspb.Message.getField(this, 5));
};


/** @param {number?|undefined} value  */
proto.SSL_DetectionBall.prototype.setZ = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.SSL_DetectionBall.prototype.clearZ = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_DetectionBall.prototype.hasZ = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required float pixel_x = 6;
 * @return {number}
 */
proto.SSL_DetectionBall.prototype.getPixelX = function() {
  return /** @type {number} */ (!this.hasPixelX() ? 0.0 : +jspb.Message.getField(this, 6));
};


/** @param {number|undefined} value  */
proto.SSL_DetectionBall.prototype.setPixelX = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.SSL_DetectionBall.prototype.clearPixelX = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_DetectionBall.prototype.hasPixelX = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required float pixel_y = 7;
 * @return {number}
 */
proto.SSL_DetectionBall.prototype.getPixelY = function() {
  return /** @type {number} */ (!this.hasPixelY() ? 0.0 : +jspb.Message.getField(this, 7));
};


/** @param {number|undefined} value  */
proto.SSL_DetectionBall.prototype.setPixelY = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.SSL_DetectionBall.prototype.clearPixelY = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_DetectionBall.prototype.hasPixelY = function() {
  return jspb.Message.getField(this, 7) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SSL_DetectionRobot = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, null);
};
goog.inherits(proto.SSL_DetectionRobot, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SSL_DetectionRobot.displayName = 'proto.SSL_DetectionRobot';
}


if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SSL_DetectionRobot.prototype.toObject = function(opt_includeInstance) {
  return proto.SSL_DetectionRobot.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SSL_DetectionRobot} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SSL_DetectionRobot.toObject = function(includeInstance, msg) {
  var f, obj = {
    confidence: +jspb.Message.getField(msg, 1),
    robotId: jspb.Message.getField(msg, 2),
    x: +jspb.Message.getField(msg, 3),
    y: +jspb.Message.getField(msg, 4),
    orientation: jspb.Message.getOptionalFloatingPointField(msg, 5),
    pixelX: +jspb.Message.getField(msg, 6),
    pixelY: +jspb.Message.getField(msg, 7),
    height: jspb.Message.getOptionalFloatingPointField(msg, 8)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SSL_DetectionRobot}
 */
proto.SSL_DetectionRobot.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SSL_DetectionRobot;
  return proto.SSL_DetectionRobot.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SSL_DetectionRobot} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SSL_DetectionRobot}
 */
proto.SSL_DetectionRobot.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setConfidence(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setRobotId(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setX(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setY(value);
      break;
    case 5:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setOrientation(value);
      break;
    case 6:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPixelX(value);
      break;
    case 7:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setPixelY(value);
      break;
    case 8:
      var value = /** @type {number} */ (reader.readFloat());
      msg.setHeight(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.SSL_DetectionRobot} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SSL_DetectionRobot.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SSL_DetectionRobot.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.SSL_DetectionRobot.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeFloat(
      1,
      f
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeUint32(
      2,
      f
    );
  }
  f = jspb.Message.getField(this, 3);
  if (f != null) {
    writer.writeFloat(
      3,
      f
    );
  }
  f = jspb.Message.getField(this, 4);
  if (f != null) {
    writer.writeFloat(
      4,
      f
    );
  }
  f = jspb.Message.getField(this, 5);
  if (f != null) {
    writer.writeFloat(
      5,
      f
    );
  }
  f = jspb.Message.getField(this, 6);
  if (f != null) {
    writer.writeFloat(
      6,
      f
    );
  }
  f = jspb.Message.getField(this, 7);
  if (f != null) {
    writer.writeFloat(
      7,
      f
    );
  }
  f = jspb.Message.getField(this, 8);
  if (f != null) {
    writer.writeFloat(
      8,
      f
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.SSL_DetectionRobot} The clone.
 */
proto.SSL_DetectionRobot.prototype.cloneMessage = function() {
  return /** @type {!proto.SSL_DetectionRobot} */ (jspb.Message.cloneMessage(this));
};


/**
 * required float confidence = 1;
 * @return {number}
 */
proto.SSL_DetectionRobot.prototype.getConfidence = function() {
  return /** @type {number} */ (!this.hasConfidence() ? 0.0 : +jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.SSL_DetectionRobot.prototype.setConfidence = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SSL_DetectionRobot.prototype.clearConfidence = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_DetectionRobot.prototype.hasConfidence = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional uint32 robot_id = 2;
 * @return {number}
 */
proto.SSL_DetectionRobot.prototype.getRobotId = function() {
  return /** @type {number} */ (!this.hasRobotId() ? 0 : jspb.Message.getField(this, 2));
};


/** @param {number?|undefined} value  */
proto.SSL_DetectionRobot.prototype.setRobotId = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SSL_DetectionRobot.prototype.clearRobotId = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_DetectionRobot.prototype.hasRobotId = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required float x = 3;
 * @return {number}
 */
proto.SSL_DetectionRobot.prototype.getX = function() {
  return /** @type {number} */ (!this.hasX() ? 0.0 : +jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.SSL_DetectionRobot.prototype.setX = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SSL_DetectionRobot.prototype.clearX = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_DetectionRobot.prototype.hasX = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required float y = 4;
 * @return {number}
 */
proto.SSL_DetectionRobot.prototype.getY = function() {
  return /** @type {number} */ (!this.hasY() ? 0.0 : +jspb.Message.getField(this, 4));
};


/** @param {number|undefined} value  */
proto.SSL_DetectionRobot.prototype.setY = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SSL_DetectionRobot.prototype.clearY = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_DetectionRobot.prototype.hasY = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * optional float orientation = 5;
 * @return {number}
 */
proto.SSL_DetectionRobot.prototype.getOrientation = function() {
  return /** @type {number} */ (!this.hasOrientation() ? 0.0 : +jspb.Message.getField(this, 5));
};


/** @param {number?|undefined} value  */
proto.SSL_DetectionRobot.prototype.setOrientation = function(value) {
  jspb.Message.setField(this, 5, value);
};


proto.SSL_DetectionRobot.prototype.clearOrientation = function() {
  jspb.Message.setField(this, 5, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_DetectionRobot.prototype.hasOrientation = function() {
  return jspb.Message.getField(this, 5) != null;
};


/**
 * required float pixel_x = 6;
 * @return {number}
 */
proto.SSL_DetectionRobot.prototype.getPixelX = function() {
  return /** @type {number} */ (!this.hasPixelX() ? 0.0 : +jspb.Message.getField(this, 6));
};


/** @param {number|undefined} value  */
proto.SSL_DetectionRobot.prototype.setPixelX = function(value) {
  jspb.Message.setField(this, 6, value);
};


proto.SSL_DetectionRobot.prototype.clearPixelX = function() {
  jspb.Message.setField(this, 6, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_DetectionRobot.prototype.hasPixelX = function() {
  return jspb.Message.getField(this, 6) != null;
};


/**
 * required float pixel_y = 7;
 * @return {number}
 */
proto.SSL_DetectionRobot.prototype.getPixelY = function() {
  return /** @type {number} */ (!this.hasPixelY() ? 0.0 : +jspb.Message.getField(this, 7));
};


/** @param {number|undefined} value  */
proto.SSL_DetectionRobot.prototype.setPixelY = function(value) {
  jspb.Message.setField(this, 7, value);
};


proto.SSL_DetectionRobot.prototype.clearPixelY = function() {
  jspb.Message.setField(this, 7, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_DetectionRobot.prototype.hasPixelY = function() {
  return jspb.Message.getField(this, 7) != null;
};


/**
 * optional float height = 8;
 * @return {number}
 */
proto.SSL_DetectionRobot.prototype.getHeight = function() {
  return /** @type {number} */ (!this.hasHeight() ? 0.0 : +jspb.Message.getField(this, 8));
};


/** @param {number?|undefined} value  */
proto.SSL_DetectionRobot.prototype.setHeight = function(value) {
  jspb.Message.setField(this, 8, value);
};


proto.SSL_DetectionRobot.prototype.clearHeight = function() {
  jspb.Message.setField(this, 8, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_DetectionRobot.prototype.hasHeight = function() {
  return jspb.Message.getField(this, 8) != null;
};



/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.SSL_DetectionFrame = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, proto.SSL_DetectionFrame.repeatedFields_, null);
};
goog.inherits(proto.SSL_DetectionFrame, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.SSL_DetectionFrame.displayName = 'proto.SSL_DetectionFrame';
}
/**
 * List of repeated fields within this message type.
 * @private {!Array<number>}
 * @const
 */
proto.SSL_DetectionFrame.repeatedFields_ = [5,6,7];



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.SSL_DetectionFrame.prototype.toObject = function(opt_includeInstance) {
  return proto.SSL_DetectionFrame.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.SSL_DetectionFrame} msg The msg instance to transform.
 * @return {!Object}
 */
proto.SSL_DetectionFrame.toObject = function(includeInstance, msg) {
  var f, obj = {
    frameNumber: jspb.Message.getField(msg, 1),
    tCapture: +jspb.Message.getField(msg, 2),
    tSent: +jspb.Message.getField(msg, 3),
    cameraId: jspb.Message.getField(msg, 4),
    ballsList: jspb.Message.toObjectList(msg.getBallsList(),
    proto.SSL_DetectionBall.toObject, includeInstance),
    robotsYellowList: jspb.Message.toObjectList(msg.getRobotsYellowList(),
    proto.SSL_DetectionRobot.toObject, includeInstance),
    robotsBlueList: jspb.Message.toObjectList(msg.getRobotsBlueList(),
    proto.SSL_DetectionRobot.toObject, includeInstance)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.SSL_DetectionFrame}
 */
proto.SSL_DetectionFrame.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.SSL_DetectionFrame;
  return proto.SSL_DetectionFrame.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.SSL_DetectionFrame} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.SSL_DetectionFrame}
 */
proto.SSL_DetectionFrame.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setFrameNumber(value);
      break;
    case 2:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTCapture(value);
      break;
    case 3:
      var value = /** @type {number} */ (reader.readDouble());
      msg.setTSent(value);
      break;
    case 4:
      var value = /** @type {number} */ (reader.readUint32());
      msg.setCameraId(value);
      break;
    case 5:
      var value = new proto.SSL_DetectionBall;
      reader.readMessage(value,proto.SSL_DetectionBall.deserializeBinaryFromReader);
      msg.getBallsList().push(value);
      msg.setBallsList(msg.getBallsList());
      break;
    case 6:
      var value = new proto.SSL_DetectionRobot;
      reader.readMessage(value,proto.SSL_DetectionRobot.deserializeBinaryFromReader);
      msg.getRobotsYellowList().push(value);
      msg.setRobotsYellowList(msg.getRobotsYellowList());
      break;
    case 7:
      var value = new proto.SSL_DetectionRobot;
      reader.readMessage(value,proto.SSL_DetectionRobot.deserializeBinaryFromReader);
      msg.getRobotsBlueList().push(value);
      msg.setRobotsBlueList(msg.getRobotsBlueList());
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Class method variant: serializes the given message to binary data
 * (in protobuf wire format), writing to the given BinaryWriter.
 * @param {!proto.SSL_DetectionFrame} message
 * @param {!jspb.BinaryWriter} writer
 */
proto.SSL_DetectionFrame.serializeBinaryToWriter = function(message, writer) {
  message.serializeBinaryToWriter(writer);
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.SSL_DetectionFrame.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  this.serializeBinaryToWriter(writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the message to binary data (in protobuf wire format),
 * writing to the given BinaryWriter.
 * @param {!jspb.BinaryWriter} writer
 */
proto.SSL_DetectionFrame.prototype.serializeBinaryToWriter = function (writer) {
  var f = undefined;
  f = jspb.Message.getField(this, 1);
  if (f != null) {
    writer.writeUint32(
      1,
      f
    );
  }
  f = jspb.Message.getField(this, 2);
  if (f != null) {
    writer.writeDouble(
      2,
      f
    );
  }
  f = jspb.Message.getField(this, 3);
  if (f != null) {
    writer.writeDouble(
      3,
      f
    );
  }
  f = jspb.Message.getField(this, 4);
  if (f != null) {
    writer.writeUint32(
      4,
      f
    );
  }
  f = this.getBallsList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      5,
      f,
      proto.SSL_DetectionBall.serializeBinaryToWriter
    );
  }
  f = this.getRobotsYellowList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      6,
      f,
      proto.SSL_DetectionRobot.serializeBinaryToWriter
    );
  }
  f = this.getRobotsBlueList();
  if (f.length > 0) {
    writer.writeRepeatedMessage(
      7,
      f,
      proto.SSL_DetectionRobot.serializeBinaryToWriter
    );
  }
};


/**
 * Creates a deep clone of this proto. No data is shared with the original.
 * @return {!proto.SSL_DetectionFrame} The clone.
 */
proto.SSL_DetectionFrame.prototype.cloneMessage = function() {
  return /** @type {!proto.SSL_DetectionFrame} */ (jspb.Message.cloneMessage(this));
};


/**
 * required uint32 frame_number = 1;
 * @return {number}
 */
proto.SSL_DetectionFrame.prototype.getFrameNumber = function() {
  return /** @type {number} */ (!this.hasFrameNumber() ? 0 : jspb.Message.getField(this, 1));
};


/** @param {number|undefined} value  */
proto.SSL_DetectionFrame.prototype.setFrameNumber = function(value) {
  jspb.Message.setField(this, 1, value);
};


proto.SSL_DetectionFrame.prototype.clearFrameNumber = function() {
  jspb.Message.setField(this, 1, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_DetectionFrame.prototype.hasFrameNumber = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * required double t_capture = 2;
 * @return {number}
 */
proto.SSL_DetectionFrame.prototype.getTCapture = function() {
  return /** @type {number} */ (!this.hasTCapture() ? 0.0 : +jspb.Message.getField(this, 2));
};


/** @param {number|undefined} value  */
proto.SSL_DetectionFrame.prototype.setTCapture = function(value) {
  jspb.Message.setField(this, 2, value);
};


proto.SSL_DetectionFrame.prototype.clearTCapture = function() {
  jspb.Message.setField(this, 2, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_DetectionFrame.prototype.hasTCapture = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * required double t_sent = 3;
 * @return {number}
 */
proto.SSL_DetectionFrame.prototype.getTSent = function() {
  return /** @type {number} */ (!this.hasTSent() ? 0.0 : +jspb.Message.getField(this, 3));
};


/** @param {number|undefined} value  */
proto.SSL_DetectionFrame.prototype.setTSent = function(value) {
  jspb.Message.setField(this, 3, value);
};


proto.SSL_DetectionFrame.prototype.clearTSent = function() {
  jspb.Message.setField(this, 3, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_DetectionFrame.prototype.hasTSent = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * required uint32 camera_id = 4;
 * @return {number}
 */
proto.SSL_DetectionFrame.prototype.getCameraId = function() {
  return /** @type {number} */ (!this.hasCameraId() ? 0 : jspb.Message.getField(this, 4));
};


/** @param {number|undefined} value  */
proto.SSL_DetectionFrame.prototype.setCameraId = function(value) {
  jspb.Message.setField(this, 4, value);
};


proto.SSL_DetectionFrame.prototype.clearCameraId = function() {
  jspb.Message.setField(this, 4, undefined);
};


/**
 * Returns whether this field is set.
 * @return{!boolean}
 */
proto.SSL_DetectionFrame.prototype.hasCameraId = function() {
  return jspb.Message.getField(this, 4) != null;
};


/**
 * repeated SSL_DetectionBall balls = 5;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.SSL_DetectionBall>}
 */
proto.SSL_DetectionFrame.prototype.getBallsList = function() {
  return /** @type{!Array.<!proto.SSL_DetectionBall>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SSL_DetectionBall, 5));
};


/** @param {Array.<!proto.SSL_DetectionBall>} value  */
proto.SSL_DetectionFrame.prototype.setBallsList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 5, value);
};


proto.SSL_DetectionFrame.prototype.clearBallsList = function() {
  this.setBallsList([]);
};


/**
 * repeated SSL_DetectionRobot robots_yellow = 6;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.SSL_DetectionRobot>}
 */
proto.SSL_DetectionFrame.prototype.getRobotsYellowList = function() {
  return /** @type{!Array.<!proto.SSL_DetectionRobot>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SSL_DetectionRobot, 6));
};


/** @param {Array.<!proto.SSL_DetectionRobot>} value  */
proto.SSL_DetectionFrame.prototype.setRobotsYellowList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 6, value);
};


proto.SSL_DetectionFrame.prototype.clearRobotsYellowList = function() {
  this.setRobotsYellowList([]);
};


/**
 * repeated SSL_DetectionRobot robots_blue = 7;
 * If you change this array by adding, removing or replacing elements, or if you
 * replace the array itself, then you must call the setter to update it.
 * @return {!Array.<!proto.SSL_DetectionRobot>}
 */
proto.SSL_DetectionFrame.prototype.getRobotsBlueList = function() {
  return /** @type{!Array.<!proto.SSL_DetectionRobot>} */ (
    jspb.Message.getRepeatedWrapperField(this, proto.SSL_DetectionRobot, 7));
};


/** @param {Array.<!proto.SSL_DetectionRobot>} value  */
proto.SSL_DetectionFrame.prototype.setRobotsBlueList = function(value) {
  jspb.Message.setRepeatedWrapperField(this, 7, value);
};


proto.SSL_DetectionFrame.prototype.clearRobotsBlueList = function() {
  this.setRobotsBlueList([]);
};


goog.object.extend(exports, proto);
